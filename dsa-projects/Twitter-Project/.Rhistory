trainset <- dataframe[trainindex,]
testset <- dataframe [-trainindex,]
list(trainset = trainset,testset=testset)
}
#Gerando dados de treino e de teste
splits <- splitData(Credit, seed = 808)
#separando os dados
dados_treino <- splits$trainset
dados_teste <- splits$testset
#verificando o numero de linhas
nrow(dados_treino)
nrow(dados_teste)
#Construindo o modelo
modelo <- randomForest(CreditStatus ~CheckingAcctStat
+ Duration_f
+ Purpose
+ CreditHistory
+ SavingsBonds
+ Employment
+ CreditAmount_f,
data = dados_treino,
ntree = 100,
nodesize =10)
#imprimindo o modelo
print(modelo)
dados_treino <- splits$trainset
nrow(dados_treino)
nrow(dados_teste)
table(Credit$CreditStatus)
splitData <- function(dataframe, seed = NULL){
if(!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <-sample(index,trunc(length(index/2)))
trainset <- dataframe[trainindex,]
testset <- dataframe [-trainindex,]
list(trainset = trainset,testset=testset)
}
#Gerando dados de treino e de teste
splits <- splitData(Credit, seed = 808)
#separando os dados
dados_treino <- splits$trainset
dados_teste <- splits$testset
#verificando o numero de linhas
nrow(dados_treino)
nrow(dados_teste)
#Construindo o modelo
modelo <- randomForest(CreditStatus ~CheckingAcctStat
+ Duration_f
+ Purpose
+ CreditHistory
+ SavingsBonds
+ Employment
+ CreditAmount_f,
data = dados_treino,
ntree = 100,
nodesize =10)
#imprimindo o modelo
print(modelo)
splitData <- function(dataframe, seed = NULL){
if(!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <-sample(index,trunc(length(index/2)))
trainset <- dataframe[trainindex,]
testset <- dataframe [-trainindex,]
list(trainset = trainset,testset=testset)
}
#Gerando dados de treino e de teste
splits <- splitData(Credit, seed = 808)
#separando os dados
dados_treino <- splits$trainset
dados_teste <- splits$testset
#verificando o numero de linhas
nrow(dados_treino)
nrow(dados_teste)
#Construindo o modelo
modelo <- randomForest(CreditStatus ~CheckingAcctStat
+ Duration_f
+ Purpose
+ CreditHistory
+ SavingsBonds
+ Employment
+ CreditAmount_f,
data = dados_treino,
ntree = 100,
nodesize =10)
#imprimindo o modelo
print(modelo)
require(randomForest)
previsoes <-data.frame(observado = dados_teste$CreditStatus, previsto = predict(modelo,newdata = dados_teste))
#visualizando o resultado
View(previsoes)
Views(dados_teste)
require(randomForest)
previsoes <- data.frame(observado = dados_teste$CreditStatus, previsto = predict(modelo,newdata = dados_teste))
#visualizando o resultado
View(previsoes)
View(dados_teste)
previsoes <- data.frame(observado = dados_teste$CreditStatus, previsto = predict(modelo,newdata = dados_teste))
View(dados_teste)
dados_teste <- splits$testset
dados_treino <- splits$trainset
table(Credit$CreditStatus)
splitData <- function(dataframe, seed = NULL){
if(!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <-sample(index,trunc(length(index/2)))
trainset <- dataframe[trainindex,]
testset <- dataframe [-trainindex,]
list(trainset = trainset,testset=testset)
}
splits <- splitData(Credit, seed = 808)
dados_treino <- splits$trainset
dados_teste <- splits$testset
nrow(dados_treino)
nrow(dados_teste)
modelo <- randomForest(CreditStatus ~CheckingAcctStat
+ Duration_f
+ Purpose
+ CreditHistory
+ SavingsBonds
+ Employment
+ CreditAmount_f,
data = dados_treino,
ntree = 100,
nodesize =10)
print(modelo)
View(dados_teste)
View(dados_teste)
require(randomForest)
previsoes <- data.frame(observado = dados_teste$CreditStatus, previsto = predict(modelo,newdata = dados_teste))
View(previsoes)
View(dados_teste)
previsoes <- data.frame(observado = dados_teste$CreditStatus, previsto = predict(modelo,newdata = dados_teste))
View(previsoes)
View(dados_teste)
splits <- splitData(Credit, seed = 808)
splits
dados_treino <- splits$trainset
dados_teste <- splits$testset
dados_teste
view(dados_teste)
View(dados_teste)
View(previsoes)
View(dados_teste)
# Gerando previsões nos dados de teste
previsoes <- data.frame(observado = dados_teste$CreditStatus,
previsto = predict(modelo, newdata = dados_teste))
# Visualizando o resultado
View(previsoes)
View(dados_teste)
credit.df <- read.csv("credit_dataset.csv", header = TRUE)
credit.df <- read.csv("credit_dataset.csv", header = TRUE)
getgwd()
getwd()
setwd("~Documentos/Firma_Things/R/Mini-Projeto-4")
setwd("~/Documentos/Firma_Things/R/Mini-Projeto-4")
getwd()
credit.df <- read.csv("credit_dataset.csv", header = TRUE)
head(credit.df)
type(credit.df)
class(credit.df)
typeof(credit.df)
typeof(credit.df$credit.rating)
typeof(get(credit.df))
typeof(get(credit.df)))
eapply(.credit_df,typeof)
eapply(.credit_df,typeof)
eapply(credit_df,typeof)
var  <- objects()
var
to.factors <- function(df,variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return (df)
}
to.factors
ão de Normalização
scale.features <- function(df,variables){
scale.features <- function(df,variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]],center = T, scale = T)
}
return (df)
}
}
scale.features <- function(df,variables){
scale.features <- function(df,variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]],center = T, scale = T)
}
return (df)
}
}
numeric.vars <- c("credit.duration.months","age","credit.amount")
numeric.vars <- c("credit.duration.months","age","credit.amount")
credit.df <- scale.features(credit.df,numeric.vars)
credit.df
head(credit.df)
head(credit.df)
credit.df
categorical.vars <- c('credit.rating','account.balance','previous.credit.payment_status','credit.purpose','savings','employment.duration','installments.rate','marital.status','guarantor','residence.duration','current.assets','other.credits',
'apartment.type','bank.credits','occupation','dependents','telephone','foreign.worker')
credit.df <- to.factors(credit.df,categorical.vars)
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
categorical.vars <- c('credit.rating','account.balance','previous.credit.payment.status','credit.purpose','savings','employment.duration','installments.rate','marital.status','guarantor','residence.duration','current.assets','other.credits',
'apartment.type','bank.credits','occupation','dependents','telephone','foreign.worker')
#fazendo a conversão
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
categorical.vars <- c('credit.rating','account.balance','previous.credit.payment.status','credit.purpose','savings','employment.duration','installment.rate','marital.status','guarantor','residence.duration','current.assets','other.credits',
'apartment.type','bank.credits','occupation','dependents','telephone','foreign.worker')
#fazendo a conversão
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
## Criando a função de converter as variaveis para o tipo fator (categorico)
to.factors <- function(df,variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return (df)
}
#cria
#fazendo a conversão
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
#fazendo a conversão
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
zendo a conversão
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
to.factors <- function(df,variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return (df)
}
scale.features <- function(df,variables){
scale.features <- function(df,variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]],center = T, scale = T)
}
return (df)
}
}
to.factors <- function(df,variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return (df)
}
scale.features <- function(df,variables){
scale.features <- function(df,variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]],center = T, scale = T)
}
return (df)
}
}
numeric.vars <- c("credit.duration.months","age","credit.amount")
credit.df <- scale.features(credit.df,numeric.vars)
#variaveveis do tipo fator
categorical.vars <- c('credit.rating','account.balance','previous.credit.payment.status','credit.purpose','savings','employment.duration','installment.rate','marital.status','guarantor','residence.duration','current.assets','other.credits',
'apartment.type','bank.credits','occupation','dependents','telephone','foreign.worker')
#fazendo a conversão
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
#Definindo pasta do projeto
setwd("~/Documentos/Firma_Things/R/Mini-Projeto-4")
# Verificando pasta do projeto
getwd()
# Carregando o dataset de credito
credit.df <- read.csv("credit_dataset.csv", header = TRUE)
head(credit.df)
## Criando a função de converter as variaveis para o tipo fator (categorico)
to.factors <- function(df,variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return (df)
}
#criando a função de Normalização
scale.features <- function(df,variables){
scale.features <- function(df,variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]],center = T, scale = T)
}
return (df)
}
}
#Normalizando as variaveis para credit.df
numeric.vars <- c("credit.duration.months","age","credit.amount")
credit.df <- scale.features(credit.df,numeric.vars)
#variaveveis do tipo fator
categorical.vars <- c('credit.rating','account.balance','previous.credit.payment.status','credit.purpose','savings','employment.duration','installment.rate','marital.status','guarantor','residence.duration','current.assets','other.credits',
'apartment.type','bank.credits','occupation','dependents','telephone','foreign.worker')
#fazendo a conversão
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
head(credit.df)
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
'apartment.type','bank.credits','occupation','dependents','telephone','foreign.worker')
categorical.vars
credit.df <- read.csv("credit_dataset.csv", header = TRUE)
to.factors <- function(df,variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return (df)
}
scale.features <- function(df,variables){
scale.features <- function(df,variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]],center = T, scale = T)
}
return (df)
}
}
numeric.vars <- c("credit.duration.months","age","credit.amount")
credit.df <- scale.features(credit.df,numeric.vars)
#variaveveis do tipo fator
categorical.vars <- c('credit.rating','account.balance','previous.credit.payment.status','credit.purpose','savings','employment.duration','installment.rate','marital.status','guarantor','residence.duration','current.assets','other.credits',
'apartment.type','bank.credits','occupation','dependents','telephone','foreign.worker')
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
categorical.vars <- c('credit.rating','account.balance','previous.credit.payment.status','credit.purpose','savings','employment.duration','installment.rate','marital.status','guarantor','residence.duration','current.assets','other.credits','apartment.type','bank.credits','occupation','dependents','telephone','foreign.worker')
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
Variáveis do tipo fator
categorical.vars <- c('credit.rating', 'account.balance', 'previous.credit.payment.status',
'credit.purpose', 'savings', 'employment.duration', 'installment.rate',
'marital.status', 'guarantor', 'residence.duration', 'current.assets',
'other.credits', 'apartment.type', 'bank.credits', 'occupation',
'dependents', 'telephone', 'foreign.worker')
#fazendo a conversão
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
scale.features <- function(df,variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]],center = T, scale = T)
}
return (df)
}
to.factors <- function(df,variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return (df)
}
scale.features <- function(df,variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]],center = T, scale = T)
}
return (df)
}
credit.df <- read.csv("credit_dataset.csv", header = TRUE)
numeric.vars <- c("credit.duration.months","age","credit.amount")
credit.df <- scale.features(credit.df,numeric.vars)
categorical.vars <- c('credit.rating', 'account.balance', 'previous.credit.payment.status',
'credit.purpose', 'savings', 'employment.duration', 'installment.rate',
'marital.status', 'guarantor', 'residence.duration', 'current.assets',
'other.credits', 'apartment.type', 'bank.credits', 'occupation',
'dependents', 'telephone', 'foreign.worker')
#fazendo a conversão
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
credit.df <- to.factors(df = credit.df,variables = categorical.vars)
credit.df
head(credit.df)
head(credit.df)
indexes <- sample(1:nrow(credit.df),size = 0.6*nrow(credit.df))
?sample
indexes <- sample(1:nrow(credit.df),size = 0.6*nrow(credit.df))
train.data <- credit.df[indexes,]
test.data <- credit.df [-indexes,] # lembrando que o - é pra pegor o que "não foi pego" do indexes.
library(caret)
library(randomForest)
library(caret)
library(randomForest)
#Função para seleção das variaveis
run.feature.selection <- function(num.iters=20,feature.vars,class.var){
set.seed(10)
variable.sizes <-1:10
control <- rfeControl(functions = rfFuncs,method = "cv",verbose = FALSE,returnResamp = "all",number = num.iters)
results.rfe <- rfe(x=feature.vars, y= class.var,sizes = variable.sizes,rfeControl = control)
return(results.rfe)
train.data[,-1]
train.data[,-1]
credit.df[,-1]
rfe.results <-run.feature.selection(feature.vars = train.data[,-1],class.var = train.data[,1])
library(caret)
library(randomForest)
das variaveis utilizando random forest
run.feature.selection <- function(num.iters=20,feature.vars,class.var){
set.seed(10)
variable.sizes <-1:10
control <- rfeControl(functions = rfFuncs,method = "cv",verbose = FALSE,returnResamp = "all",number = num.iters)
results.rfe <- rfe(x=feature.vars, y= class.var,sizes = variable.sizes,rfeControl = control)
return(results.rfe)
}
rfe.results <-run.feature.selection(feature.vars = train.data[,-1],class.var = train.data[,1])
rfe.results
s resultados
train.data[,-1]
train.data[,1]
rfe.results
varImp((rfe.results))
rfe.results
varImp((rfe.results))
aliando o modelo
library (caret)
library(ROCR)
library(ROCR)
odelo
install.packages("ROCR")
install.packages("ROCR")
library(ROCR)
source("plot_utils.R")
#Biblioteca de utilitarios para construção de gráficos
source("plot_utils.R")
iables
test.features.vars <- test.data[,-1]
test.class.var <- test.data[,1]
stica
formula.init <- "credit.rating ~."
formula.init <- as.formula(formula.init)
?as.formula
lr.model <- glm(formula = formula.init, data = train.data, family = "binomial")
summary(lr.model)
lr.predictions <- predict(lr.model, test.data, type = "response")
lr.predictions <- round(lr.predictions)
lr.predictions
confusionMatrix(table(data= lr.predictions,reference = test.class.var), positive = '1')
formula <- "credit.rating ~ ."
formula <- as.formula(formula)
control <- trainControl(method = "repeatedcv", number = 10, repeats = 2)
importance <- varImp(model,scale =FALSE)
control <- trainControl(method = "repeatedcv", number = 10, repeats = 2)
model <- train(formula,data = train.data,method = "glm", trControl = control)
importance <- varImp(model,scale =FALSE)
plot(importance)
formula.new <- "credit.rating ~ account.balance + credit.purpose + previous.credit.payment.status + credit.purpose + savings + credit.duration.months"
formula.new <- as.formula(formula.new)
formula.new <- "credit.rating ~ account.balance + credit.purpose + previous.credit.payment.status + credit.purpose + savings + credit.duration.months"
formula.new <- as.formula(formula.new)
lr.model.new <- glm(formula = formula.new,data = train.data,family = "binomial")
#Visualizando o modelo
summary(lr.model.new)
lr.predictions.new <- predict(lr.model.new, test.data, type = "response")
lr.predictions.new <- round(lr.predictions.new)
confusionMatrix(table(data= lr.predictions.new,reference = test.class.var), positive = '1')
formula.new <- "credit.rating ~ account.balance + credit.purpose + previous.credit.payment.status + credit.purpose + savings + credit.duration.months"
formula.new <- as.formula(formula.new)
lr.model.new <- glm(formula = formula.new,data = train.data,family = "binomial")
lr.model.best <- lr.model
lr.prediction.values <-predict(lr.model.best,test.feature.vars, type = "response")
lr.prediction.values <-predict(lr.model.best,test.feature.vars, type = "response")
lr.prediction.values <-predict(lr.model.best,test.feature.vars, type = "response")
#Separate feature and class variables
test.features.vars <- test.data[,-1]
test.class.var <- test.data[,1]
lr.model.best <- lr.model
lr.prediction.values <-predict(lr.model.best,test.feature.vars, type = "response")
lr.model.best <- lr.model
lr.prediction.values <- predict(lr.model.best,test.feature.vars, type = "response")
lr.model.best <- lr.model
lr.prediction.values <- predict(lr.model.best,test.feature.vars, type = "response")
lr.model.best <- lr.model
lr.prediction.values <- predict(lr.model.best,test.features.vars, type = "response")
lr.model.best <- lr.model
lr.prediction.values <- predict(lr.model.best,test.features.vars, type = "response")
predictions <- prediction(lr.prediction.values,test.class.var)
par(mfrow = c(1,2))
plot.roc.curve(predictions,title.text =  "Curva ROC")
plot.roc.curve(predictions,title.text =  "Curva ROC")
plot.pr.curve(predictions,title.tex = "curva precisio/recall")
plot.roc.curve(predictions,title.text =  "Curva ROC")
plot.pr.curve(predictions,title.tex = "curva precisio/recall")
par(mfrow = c(1,2))
plot.roc.curve(predictions,title.text =  "Curva ROC")
plot.pr.curve(predictions,title.tex = "curva precisio/recall")
#Definindo pasta do projeto
setwd("~/Documentos/Firma_Things/R/Twitter-Project/")
# Verificando pasta do projeto
getwd()
#Definindo pasta do projeto
setwd("~/Documentos/Firma_Things/R/Twitter-Project/")
# Verificando pasta do projeto
getwd()
install.packages("twitteR")
install.packages("httr")
install.packages("knitr")
install.packages("rmarkdown")
library(twitteR)
library(httr)
install.packages("twitteR")
install.packages("httr")
install.packages("knitr")
install.packages("rmarkdown")
library(twitteR)
library(httr)
lioteca de funções de limpeza do twitter
source('utils.R')
setup_twitter_oauth(key, secret, token, tokensecret)
library(twitteR)
library(httr)
library(twitteR)
library(httr)
library(twitteR)
library(httr)
install.packages("twitteR")
install.packages(c("httr", "twitteR"))
library(twitteR)
library(httr)
library(twitteR)
library(httr)
#Carregando a biblioteca de funções de limpeza do twitter
source('utils.R')
library(twitteR)
library(httr)
